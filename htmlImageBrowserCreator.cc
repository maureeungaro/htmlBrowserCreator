// htmlImageBrowserCreator#include "htmlImageBrowserCreator.h"// c++#include <fstream>HtmlVariable::HtmlVariable(string tit, string filename){	title = tit;	ifstream in(filename.c_str());	if(!in) {		cerr << " !! Error: can't open input file " << filename << ". Check your spelling. Exiting. " << endl;		exit(1);	} else {		cout << " > Scanning file " << filename << " for variable >" << tit << "<" << endl;		while (!in.eof()) {			string imageName;			in >> imageName ;			// checking if variable exist			if(imageName.find(tit) != string::npos) {				string thisFieldStart = imageName.substr(imageName.find(tit));				// getting upper limit: underscore or .png				string thisFieldEnd = "";				if(thisFieldStart.find("_") != string::npos) {					thisFieldEnd   = thisFieldStart.substr(0, thisFieldStart.find("_"));				} else if(thisFieldStart.find(".png") != string::npos) {					thisFieldEnd   = thisFieldStart.substr(0, thisFieldStart.find(".png"));				}				// getting lower limit: dash. This won't pass if thisFieldEnd is empty				if(thisFieldEnd.find("-") != string::npos) {					string newField = thisFieldEnd.substr(thisFieldEnd.find("-")+1);					cout << " found " << tit << ": " << newField << endl;					present.push_back(newField);				}			}		}		in.close();	}}map<string, GOption> Page::defineOptions(){	map<string, GOption> optionsMap;	optionsMap["addRowTableVariable"]    = GOption("Row Variable Description",     "mauri",          "html", true);	optionsMap["addColumnTableVariable"] = GOption("Column Variable Description",  "mauri",          "html", true);	optionsMap["addSelectableVariable"]  = GOption("QuantityVariable Description", "mauri",          "html", true);	optionsMap["f"]                      = GOption("Filename",                     "imageslist.txt", "general");	optionsMap["imagesSize"]             = GOption("(w, h) image size",            "1000 800",       "general");	return optionsMap;}Page::Page(GOptions* gopt){	string filename = gopt->getString("f");	for(auto &tv: gopt->getStrings("addRowTableVariable")) {		rows.push_back(HtmlVariable(tv, filename));	}	for(auto &tv: gopt->getStrings("addColumnTableVariable")) {		columns.push_back(HtmlVariable(tv, filename));	}	for(auto &tv: gopt->getStrings("addSelectableVariable")) {		selections.push_back(HtmlVariable(tv, filename));	}	hf.open("page.html");	writeTopHtml();	writeBottomHtml();	hf.close();}void Page::writeTopHtml(){	hf << "<html>" << endl;	hf << "\t <head>" << endl;	// css style	hf << "\t\t <style type=\"text/css\">" << endl;	hf << "\t\t\t @import \"mauri.css\"" << endl;	hf << "\t\t\t @import \"dist.css\"" << endl;	hf << "\t\t </style>" << endl;	// script	hf << "\t\t <script>" << endl;	// showPic function	hf << "\t\t function showPic() {picDisplayed = window.open(document.DIST.src, document.DIST.src, 'statusbar=no, scrollbars=auto, status=no, resizable=no, width=1000, height=800');}" << endl;	// variables	for(auto &sv: selections) {		hf << "\t\t\t var " << sv.title << " = \"" << sv.present[0] << "\";" << endl;	}	hf << "\t\t </script>" << endl;	hf << "\t </head>" << endl;}void Page::writeBottomHtml(){	hf << "</html>" << endl;}